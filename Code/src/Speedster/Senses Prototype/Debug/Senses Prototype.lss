
Senses Prototype.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000352  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800100  00800100  000003c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001172  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b6f  00000000  00000000  0000167a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005fa  00000000  00000000  000021e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000208  00000000  00000000  000027e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000082d  00000000  00000000  000029ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000058d  00000000  00000000  00003219  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  000037a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 76 00 	jmp	0xec	; 0xec <__vector_9>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	aa 30       	cpi	r26, 0x0A	; 10
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 a7 01 	jmp	0x34e	; 0x34e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
#include <util/delay.h>
#include "Senses/QTRA_Sensor.h"
#include "OrangutanTime.h"

int main(void)
{
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	cd b7       	in	r28, 0x3d	; 61
  96:	de b7       	in	r29, 0x3e	; 62
  98:	69 97       	sbiw	r28, 0x19	; 25
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	f8 94       	cli
  9e:	de bf       	out	0x3e, r29	; 62
  a0:	0f be       	out	0x3f, r0	; 63
  a2:	cd bf       	out	0x3d, r28	; 61
	DDRD |= (1<<DDD1);
  a4:	51 9a       	sbi	0x0a, 1	; 10
	PORTD &= ~(1<<PORTD7);
  a6:	5f 98       	cbi	0x0b, 7	; 11
	
	unsigned char sensor_pins[] = {ADC0_PIN,ADC1_PIN};
  a8:	19 82       	std	Y+1, r1	; 0x01
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	8a 83       	std	Y+2, r24	; 0x02
	QTRASensor qtra_sensor(sensor_pins,2,5);
  ae:	25 e0       	ldi	r18, 0x05	; 5
  b0:	42 e0       	ldi	r20, 0x02	; 2
  b2:	be 01       	movw	r22, r28
  b4:	6f 5f       	subi	r22, 0xFF	; 255
  b6:	7f 4f       	sbci	r23, 0xFF	; 255
  b8:	ce 01       	movw	r24, r28
  ba:	03 96       	adiw	r24, 0x03	; 3
  bc:	0e 94 c7 00 	call	0x18e	; 0x18e <_ZN10QTRASensorC1EPhhh>
	
    /* Replace with your application code */
    while (1) 
    {
		unsigned int values[2] = {0,0};
  c0:	1f 8a       	std	Y+23, r1	; 0x17
  c2:	1e 8a       	std	Y+22, r1	; 0x16
  c4:	19 8e       	std	Y+25, r1	; 0x19
  c6:	18 8e       	std	Y+24, r1	; 0x18
		qtra_sensor.Read(values);
  c8:	be 01       	movw	r22, r28
  ca:	6a 5e       	subi	r22, 0xEA	; 234
  cc:	7f 4f       	sbci	r23, 0xFF	; 255
  ce:	ce 01       	movw	r24, r28
  d0:	03 96       	adiw	r24, 0x03	; 3
  d2:	0e 94 1d 01 	call	0x23a	; 0x23a <_ZN10QTRASensor4ReadEPj>
		PORTD |= (1<<PORTD1);
  d6:	59 9a       	sbi	0x0b, 1	; 11
		OrangutanTime::delayMilliseconds(values[0]);
  d8:	8e 89       	ldd	r24, Y+22	; 0x16
  da:	9f 89       	ldd	r25, Y+23	; 0x17
  dc:	0e 94 b0 00 	call	0x160	; 0x160 <_ZN13OrangutanTime17delayMillisecondsEj>
		PORTD &= ~(1<<PORTD1);
  e0:	59 98       	cbi	0x0b, 1	; 11
		OrangutanTime::delayMilliseconds(values[1]);
  e2:	88 8d       	ldd	r24, Y+24	; 0x18
  e4:	99 8d       	ldd	r25, Y+25	; 0x19
  e6:	0e 94 b0 00 	call	0x160	; 0x160 <_ZN13OrangutanTime17delayMillisecondsEj>
  ea:	ea cf       	rjmp	.-44     	; 0xc0 <main+0x30>

000000ec <__vector_9>:
// ... (do something)
// unsigned long elapsedMicroseconds = OrangutanTime::ticksToMicroseconds(OrangutanTime::ticks() - ticks);
unsigned long OrangutanTime::ticksToMicroseconds(unsigned long numTicks)
{
	return (numTicks * 2 + 2) / 5;
}
  ec:	2f 92       	push	r2
  ee:	8f 93       	push	r24
  f0:	9f 93       	push	r25
  f2:	2f b6       	in	r2, 0x3f	; 63
  f4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <tickCount+0x1>
  f8:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <tickCount+0x2>
  fc:	01 96       	adiw	r24, 0x01	; 1
  fe:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <tickCount+0x1>
 102:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <tickCount+0x2>
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <tickCount+0x3>
 10c:	89 1f       	adc	r24, r25
 10e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <tickCount+0x3>
 112:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 116:	9c 5f       	subi	r25, 0xFC	; 252
 118:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 11c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 120:	80 51       	subi	r24, 0x10	; 16
 122:	97 42       	sbci	r25, 0x27	; 39
 124:	c0 f0       	brcs	.+48     	; 0x156 <end>
 126:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 12a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 12e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <msCounter>
 132:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <msCounter+0x1>
 136:	01 96       	adiw	r24, 0x01	; 1
 138:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <msCounter>
 13c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <msCounter+0x1>
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <msCounter+0x2>
 146:	89 1f       	adc	r24, r25
 148:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <msCounter+0x2>
 14c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <msCounter+0x3>
 150:	89 1f       	adc	r24, r25
 152:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <msCounter+0x3>

00000156 <end>:
 156:	2f be       	out	0x3f, r2	; 63
 158:	9f 91       	pop	r25
 15a:	8f 91       	pop	r24
 15c:	2f 90       	pop	r2
 15e:	18 95       	reti

00000160 <_ZN13OrangutanTime17delayMillisecondsEj>:
	return value;
}

void OrangutanTime::delayMilliseconds(unsigned int milliseconds)
{
	while (milliseconds--)
 160:	9c 01       	movw	r18, r24
 162:	21 50       	subi	r18, 0x01	; 1
 164:	31 09       	sbc	r19, r1
 166:	89 2b       	or	r24, r25
 168:	69 f0       	breq	.+26     	; 0x184 <_ZN13OrangutanTime17delayMillisecondsEj+0x24>
						  "   pop  r22"     "\n\t"   
						  "   sbiw %0, 1"   "\n\t"
						  "   brne 1b"
						  : "=w" ( microseconds )  
						  : "0" ( microseconds )
						  );  
 16a:	48 ee       	ldi	r20, 0xE8	; 232
 16c:	53 e0       	ldi	r21, 0x03	; 3
 16e:	ca 01       	movw	r24, r20
 170:	6f 93       	push	r22
 172:	64 e0       	ldi	r22, 0x04	; 4
 174:	6a 95       	dec	r22
 176:	f1 f7       	brne	.-4      	; 0x174 <_ZN13OrangutanTime17delayMillisecondsEj+0x14>
 178:	6f 91       	pop	r22
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	c9 f7       	brne	.-14     	; 0x170 <_ZN13OrangutanTime17delayMillisecondsEj+0x10>
 17e:	21 50       	subi	r18, 0x01	; 1
 180:	31 09       	sbc	r19, r1
 182:	a8 f7       	brcc	.-22     	; 0x16e <_ZN13OrangutanTime17delayMillisecondsEj+0xe>
 184:	08 95       	ret

00000186 <_ZN10QTRASensor10EmittersOnEv>:
	EmittersOff();
}

void QTRASensor::EmittersOn()
{
	PORTD &= ~(1<<DDD7);
 186:	5f 98       	cbi	0x0b, 7	; 11
 188:	08 95       	ret

0000018a <_ZN10QTRASensor11EmittersOffEv>:
}

void QTRASensor::EmittersOff()
{
	PORTD |= (1<<DDD7);
 18a:	5f 9a       	sbi	0x0b, 7	; 11
 18c:	08 95       	ret

0000018e <_ZN10QTRASensorC1EPhhh>:
#include <avr/io.h>

#include "QTRA_Sensor.h"


QTRASensor::QTRASensor(unsigned char* sensorPins, unsigned char numSensors, unsigned char numSamplesPerSensor)
 18e:	0f 93       	push	r16
 190:	1f 93       	push	r17
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	dc 01       	movw	r26, r24
{
	unsigned char currentPin = 0;
	
	calibratedMinimumOn=0;
 198:	11 96       	adiw	r26, 0x01	; 1
 19a:	1c 92       	st	X, r1
 19c:	1e 92       	st	-X, r1
	calibratedMaximumOn=0;
 19e:	13 96       	adiw	r26, 0x03	; 3
 1a0:	1c 92       	st	X, r1
 1a2:	1e 92       	st	-X, r1
 1a4:	12 97       	sbiw	r26, 0x02	; 2
	calibratedMinimumOff=0;
 1a6:	15 96       	adiw	r26, 0x05	; 5
 1a8:	1c 92       	st	X, r1
 1aa:	1e 92       	st	-X, r1
 1ac:	14 97       	sbiw	r26, 0x04	; 4
	calibratedMaximumOff=0;
 1ae:	17 96       	adiw	r26, 0x07	; 7
 1b0:	1c 92       	st	X, r1
 1b2:	1e 92       	st	-X, r1
 1b4:	16 97       	sbiw	r26, 0x06	; 6
	
	if (numSensors > QTRA_MAX_SENSORS)
 1b6:	49 30       	cpi	r20, 0x09	; 9
 1b8:	28 f0       	brcs	.+10     	; 0x1c4 <_ZN10QTRASensorC1EPhhh+0x36>
	{
		this->numSensors = QTRA_MAX_SENSORS;
 1ba:	88 e0       	ldi	r24, 0x08	; 8
 1bc:	18 96       	adiw	r26, 0x08	; 8
 1be:	8c 93       	st	X, r24
 1c0:	18 97       	sbiw	r26, 0x08	; 8
 1c2:	03 c0       	rjmp	.+6      	; 0x1ca <_ZN10QTRASensorC1EPhhh+0x3c>
	}
	else
	{
		this->numSensors = numSensors;
 1c4:	18 96       	adiw	r26, 0x08	; 8
 1c6:	4c 93       	st	X, r20
 1c8:	18 97       	sbiw	r26, 0x08	; 8
	}
	
	this->numSamplesPerSensor = numSamplesPerSensor;
 1ca:	19 96       	adiw	r26, 0x09	; 9
 1cc:	2c 93       	st	X, r18
 1ce:	19 97       	sbiw	r26, 0x09	; 9
	
	portMask = 0;
 1d0:	52 96       	adiw	r26, 0x12	; 18
 1d2:	1c 92       	st	X, r1
 1d4:	52 97       	sbiw	r26, 0x12	; 18
	for(currentPin = 0; currentPin < numSensors; currentPin++)
 1d6:	44 23       	and	r20, r20
 1d8:	19 f1       	breq	.+70     	; 0x220 <_ZN10QTRASensorC1EPhhh+0x92>
 1da:	8d 01       	movw	r16, r26
 1dc:	06 5f       	subi	r16, 0xF6	; 246
 1de:	1f 4f       	sbci	r17, 0xFF	; 255
 1e0:	fb 01       	movw	r30, r22
 1e2:	41 50       	subi	r20, 0x01	; 1
 1e4:	50 e0       	ldi	r21, 0x00	; 0
 1e6:	4f 5f       	subi	r20, 0xFF	; 255
 1e8:	5f 4f       	sbci	r21, 0xFF	; 255
 1ea:	64 0f       	add	r22, r20
 1ec:	75 1f       	adc	r23, r21
	{
		this->sensorPins[currentPin] = sensorPins[currentPin];
		portMask |= (1 << sensorPins[currentPin]);
 1ee:	41 e0       	ldi	r20, 0x01	; 1
 1f0:	50 e0       	ldi	r21, 0x00	; 0
 1f2:	cf 01       	movw	r24, r30
	this->numSamplesPerSensor = numSamplesPerSensor;
	
	portMask = 0;
	for(currentPin = 0; currentPin < numSensors; currentPin++)
	{
		this->sensorPins[currentPin] = sensorPins[currentPin];
 1f4:	21 91       	ld	r18, Z+
 1f6:	e8 01       	movw	r28, r16
 1f8:	29 93       	st	Y+, r18
 1fa:	8e 01       	movw	r16, r28
		portMask |= (1 << sensorPins[currentPin]);
 1fc:	9a 01       	movw	r18, r20
 1fe:	ec 01       	movw	r28, r24
 200:	08 80       	ld	r0, Y
 202:	02 c0       	rjmp	.+4      	; 0x208 <_ZN10QTRASensorC1EPhhh+0x7a>
 204:	22 0f       	add	r18, r18
 206:	33 1f       	adc	r19, r19
 208:	0a 94       	dec	r0
 20a:	e2 f7       	brpl	.-8      	; 0x204 <_ZN10QTRASensorC1EPhhh+0x76>
 20c:	52 96       	adiw	r26, 0x12	; 18
 20e:	8c 91       	ld	r24, X
 210:	52 97       	sbiw	r26, 0x12	; 18
 212:	28 2b       	or	r18, r24
 214:	52 96       	adiw	r26, 0x12	; 18
 216:	2c 93       	st	X, r18
 218:	52 97       	sbiw	r26, 0x12	; 18
	}
	
	this->numSamplesPerSensor = numSamplesPerSensor;
	
	portMask = 0;
	for(currentPin = 0; currentPin < numSensors; currentPin++)
 21a:	e6 17       	cp	r30, r22
 21c:	f7 07       	cpc	r31, r23
 21e:	49 f7       	brne	.-46     	; 0x1f2 <_ZN10QTRASensorC1EPhhh+0x64>
		this->sensorPins[currentPin] = sensorPins[currentPin];
		portMask |= (1 << sensorPins[currentPin]);
	}
	
	// Configure ADC settings. Prescalar set to 156kHz
	ADCSRA |= (1 << ADEN)| (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 220:	ea e7       	ldi	r30, 0x7A	; 122
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	87 68       	ori	r24, 0x87	; 135
 228:	80 83       	st	Z, r24
	
	// Turn off the emitter
	EmittersOff();
 22a:	cd 01       	movw	r24, r26
 22c:	0e 94 c5 00 	call	0x18a	; 0x18a <_ZN10QTRASensor11EmittersOffEv>
}
 230:	df 91       	pop	r29
 232:	cf 91       	pop	r28
 234:	1f 91       	pop	r17
 236:	0f 91       	pop	r16
 238:	08 95       	ret

0000023a <_ZN10QTRASensor4ReadEPj>:

void QTRASensor::Read(unsigned int* sensorValues)
{
 23a:	9f 92       	push	r9
 23c:	af 92       	push	r10
 23e:	bf 92       	push	r11
 240:	cf 92       	push	r12
 242:	df 92       	push	r13
 244:	ef 92       	push	r14
 246:	ff 92       	push	r15
 248:	0f 93       	push	r16
 24a:	1f 93       	push	r17
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	ec 01       	movw	r28, r24
 252:	8b 01       	movw	r16, r22
	unsigned char sumplesDone = 0;
	unsigned char currentSensor = 0;
	
	EmittersOn();
 254:	0e 94 c3 00 	call	0x186	; 0x186 <_ZN10QTRASensor10EmittersOnEv>
	
	// Store current state of various registers.
	unsigned char admux = ADMUX;
 258:	90 90 7c 00 	lds	r9, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	unsigned char adcsra = ADCSRA;
 25c:	a0 90 7a 00 	lds	r10, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	unsigned char ddr = DDRD;
 260:	ca b0       	in	r12, 0x0a	; 10
	unsigned char port = PORTD;
 262:	bb b0       	in	r11, 0x0b	; 11
	
	// Wait for any current conversion to finish.
	while (ADCSRA & (1 << ADSC));
 264:	ea e7       	ldi	r30, 0x7A	; 122
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	80 81       	ld	r24, Z
 26a:	86 fd       	sbrc	r24, 6
 26c:	fd cf       	rjmp	.-6      	; 0x268 <_ZN10QTRASensor4ReadEPj+0x2e>
	
	// Reset values.
	for (currentSensor = 0; currentSensor < numSensors; currentSensor++)
 26e:	88 85       	ldd	r24, Y+8	; 0x08
 270:	88 23       	and	r24, r24
 272:	69 f0       	breq	.+26     	; 0x28e <_ZN10QTRASensor4ReadEPj+0x54>
 274:	80 e0       	ldi	r24, 0x00	; 0
	{
		sensorValues[currentSensor] = 0;
 276:	e8 2f       	mov	r30, r24
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	ee 0f       	add	r30, r30
 27c:	ff 1f       	adc	r31, r31
 27e:	e0 0f       	add	r30, r16
 280:	f1 1f       	adc	r31, r17
 282:	11 82       	std	Z+1, r1	; 0x01
 284:	10 82       	st	Z, r1
	
	// Wait for any current conversion to finish.
	while (ADCSRA & (1 << ADSC));
	
	// Reset values.
	for (currentSensor = 0; currentSensor < numSensors; currentSensor++)
 286:	8f 5f       	subi	r24, 0xFF	; 255
 288:	98 85       	ldd	r25, Y+8	; 0x08
 28a:	89 17       	cp	r24, r25
 28c:	a0 f3       	brcs	.-24     	; 0x276 <_ZN10QTRASensor4ReadEPj+0x3c>
	{
		sensorValues[currentSensor] = 0;
	}
	
	// Set all sensors pins to high-Z inputs
	DDRC &= ~(1 << portMask);
 28e:	27 b1       	in	r18, 0x07	; 7
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	ac 01       	movw	r20, r24
 296:	0a 88       	ldd	r0, Y+18	; 0x12
 298:	02 c0       	rjmp	.+4      	; 0x29e <_ZN10QTRASensor4ReadEPj+0x64>
 29a:	44 0f       	add	r20, r20
 29c:	55 1f       	adc	r21, r21
 29e:	0a 94       	dec	r0
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <_ZN10QTRASensor4ReadEPj+0x60>
 2a2:	40 95       	com	r20
 2a4:	24 23       	and	r18, r20
 2a6:	27 b9       	out	0x07, r18	; 7
	PORTC &= ~(1 << portMask);
 2a8:	28 b1       	in	r18, 0x08	; 8
 2aa:	0a 88       	ldd	r0, Y+18	; 0x12
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <_ZN10QTRASensor4ReadEPj+0x78>
 2ae:	88 0f       	add	r24, r24
 2b0:	99 1f       	adc	r25, r25
 2b2:	0a 94       	dec	r0
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <_ZN10QTRASensor4ReadEPj+0x74>
 2b6:	80 95       	com	r24
 2b8:	82 23       	and	r24, r18
 2ba:	88 b9       	out	0x08, r24	; 8
	
	for (sumplesDone = 0; sumplesDone < numSamplesPerSensor; sumplesDone++)
 2bc:	89 85       	ldd	r24, Y+9	; 0x09
 2be:	88 23       	and	r24, r24
 2c0:	89 f1       	breq	.+98     	; 0x324 <_ZN10QTRASensor4ReadEPj+0xea>
 2c2:	d1 2c       	mov	r13, r1
	{
		for (currentSensor = 0; currentSensor < numSensors; currentSensor++)
		{
			// Set analog input channel
			ADMUX = (1 << REFS0) | sensorPins[currentSensor];
 2c4:	6c e7       	ldi	r22, 0x7C	; 124
 2c6:	70 e0       	ldi	r23, 0x00	; 0
			
			// Start the conversion.
			ADCSRA |= (1 << ADSC);
 2c8:	ea e7       	ldi	r30, 0x7A	; 122
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
			
			// Wait for conversion to finish.
			while (ADCSRA & (1 << ADSC));
			
			// Add in the conversion result.
			sensorValues[currentSensor] += ADC;
 2cc:	48 e7       	ldi	r20, 0x78	; 120
 2ce:	50 e0       	ldi	r21, 0x00	; 0
	DDRC &= ~(1 << portMask);
	PORTC &= ~(1 << portMask);
	
	for (sumplesDone = 0; sumplesDone < numSamplesPerSensor; sumplesDone++)
	{
		for (currentSensor = 0; currentSensor < numSensors; currentSensor++)
 2d0:	88 85       	ldd	r24, Y+8	; 0x08
 2d2:	88 23       	and	r24, r24
 2d4:	19 f1       	breq	.+70     	; 0x31c <_ZN10QTRASensor4ReadEPj+0xe2>
 2d6:	90 e0       	ldi	r25, 0x00	; 0
		{
			// Set analog input channel
			ADMUX = (1 << REFS0) | sensorPins[currentSensor];
 2d8:	de 01       	movw	r26, r28
 2da:	a9 0f       	add	r26, r25
 2dc:	b1 1d       	adc	r27, r1
 2de:	1a 96       	adiw	r26, 0x0a	; 10
 2e0:	8c 91       	ld	r24, X
 2e2:	80 64       	ori	r24, 0x40	; 64
 2e4:	db 01       	movw	r26, r22
 2e6:	8c 93       	st	X, r24
			
			// Start the conversion.
			ADCSRA |= (1 << ADSC);
 2e8:	80 81       	ld	r24, Z
 2ea:	80 64       	ori	r24, 0x40	; 64
 2ec:	80 83       	st	Z, r24
			
			// Wait for conversion to finish.
			while (ADCSRA & (1 << ADSC));
 2ee:	80 81       	ld	r24, Z
 2f0:	86 fd       	sbrc	r24, 6
 2f2:	fd cf       	rjmp	.-6      	; 0x2ee <_ZN10QTRASensor4ReadEPj+0xb4>
			
			// Add in the conversion result.
			sensorValues[currentSensor] += ADC;
 2f4:	da 01       	movw	r26, r20
 2f6:	ed 90       	ld	r14, X+
 2f8:	fc 90       	ld	r15, X
 2fa:	a9 2f       	mov	r26, r25
 2fc:	b0 e0       	ldi	r27, 0x00	; 0
 2fe:	aa 0f       	add	r26, r26
 300:	bb 1f       	adc	r27, r27
 302:	a0 0f       	add	r26, r16
 304:	b1 1f       	adc	r27, r17
 306:	2d 91       	ld	r18, X+
 308:	3c 91       	ld	r19, X
 30a:	11 97       	sbiw	r26, 0x01	; 1
 30c:	2e 0d       	add	r18, r14
 30e:	3f 1d       	adc	r19, r15
 310:	2d 93       	st	X+, r18
 312:	3c 93       	st	X, r19
	DDRC &= ~(1 << portMask);
	PORTC &= ~(1 << portMask);
	
	for (sumplesDone = 0; sumplesDone < numSamplesPerSensor; sumplesDone++)
	{
		for (currentSensor = 0; currentSensor < numSensors; currentSensor++)
 314:	9f 5f       	subi	r25, 0xFF	; 255
 316:	88 85       	ldd	r24, Y+8	; 0x08
 318:	98 17       	cp	r25, r24
 31a:	f0 f2       	brcs	.-68     	; 0x2d8 <_ZN10QTRASensor4ReadEPj+0x9e>
	
	// Set all sensors pins to high-Z inputs
	DDRC &= ~(1 << portMask);
	PORTC &= ~(1 << portMask);
	
	for (sumplesDone = 0; sumplesDone < numSamplesPerSensor; sumplesDone++)
 31c:	d3 94       	inc	r13
 31e:	89 85       	ldd	r24, Y+9	; 0x09
 320:	d8 16       	cp	r13, r24
 322:	b0 f2       	brcs	.-84     	; 0x2d0 <_ZN10QTRASensor4ReadEPj+0x96>
			sensorValues[currentSensor] += ADC;
		}
	}
	
	// Restore registry default values.
	ADMUX = admux;
 324:	90 92 7c 00 	sts	0x007C, r9	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = adcsra;
 328:	a0 92 7a 00 	sts	0x007A, r10	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	PORTD = port;
 32c:	bb b8       	out	0x0b, r11	; 11
	DDRD = ddr;
 32e:	ca b8       	out	0x0a, r12	; 10
	
	EmittersOff();
 330:	ce 01       	movw	r24, r28
 332:	0e 94 c5 00 	call	0x18a	; 0x18a <_ZN10QTRASensor11EmittersOffEv>
}
 336:	df 91       	pop	r29
 338:	cf 91       	pop	r28
 33a:	1f 91       	pop	r17
 33c:	0f 91       	pop	r16
 33e:	ff 90       	pop	r15
 340:	ef 90       	pop	r14
 342:	df 90       	pop	r13
 344:	cf 90       	pop	r12
 346:	bf 90       	pop	r11
 348:	af 90       	pop	r10
 34a:	9f 90       	pop	r9
 34c:	08 95       	ret

0000034e <_exit>:
 34e:	f8 94       	cli

00000350 <__stop_program>:
 350:	ff cf       	rjmp	.-2      	; 0x350 <__stop_program>
