
Speedster.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000174  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c1f  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000887  00000000  00000000  00000eaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000037b  00000000  00000000  00001736  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d4  00000000  00000000  00001ab4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005eb  00000000  00000000  00001b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000374  00000000  00000000  00002173  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000024e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 b8 00 	jmp	0x170	; 0x170 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <util/delay.h>

#include "configuration.h"

int main(void)
{
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
  88:	67 97       	sbiw	r28, 0x17	; 23
  8a:	0f b6       	in	r0, 0x3f	; 63
  8c:	f8 94       	cli
  8e:	de bf       	out	0x3e, r29	; 62
  90:	0f be       	out	0x3f, r0	; 63
  92:	cd bf       	out	0x3d, r28	; 61
	DDRD |= (1<<DDD7) | (1<<DDD1); // set LED pin PD1 to output
  94:	8a b1       	in	r24, 0x0a	; 10
  96:	82 68       	ori	r24, 0x82	; 130
  98:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<PORTD7); // drive PD1 high
  9a:	5f 9a       	sbi	0x0b, 7	; 11
	
	unsigned char line_sensor_pins[] = {ADC2_PIN,ADC3_PIN,ADC4_PIN,ADC5_PIN};
  9c:	82 e0       	ldi	r24, 0x02	; 2
  9e:	89 83       	std	Y+1, r24	; 0x01
  a0:	83 e0       	ldi	r24, 0x03	; 3
  a2:	8a 83       	std	Y+2, r24	; 0x02
  a4:	84 e0       	ldi	r24, 0x04	; 4
  a6:	8b 83       	std	Y+3, r24	; 0x03
  a8:	85 e0       	ldi	r24, 0x05	; 5
  aa:	8c 83       	std	Y+4, r24	; 0x04
	QTRASensor line_qtra_sensor(line_sensor_pins,4,5);
  ac:	25 e0       	ldi	r18, 0x05	; 5
  ae:	44 e0       	ldi	r20, 0x04	; 4
  b0:	be 01       	movw	r22, r28
  b2:	6f 5f       	subi	r22, 0xFF	; 255
  b4:	7f 4f       	sbci	r23, 0xFF	; 255
  b6:	ce 01       	movw	r24, r28
  b8:	05 96       	adiw	r24, 0x05	; 5
  ba:	0e 94 62 00 	call	0xc4	; 0xc4 <_ZN10QTRASensorC1EPhhh>
  be:	ff cf       	rjmp	.-2      	; 0xbe <main+0x3e>

000000c0 <_ZN10QTRASensor11EmittersOffEv>:
	PORTD &= ~(1<<DDD7);
}

void QTRASensor::EmittersOff()
{
	PORTD |= (1<<DDD7);
  c0:	5f 9a       	sbi	0x0b, 7	; 11
  c2:	08 95       	ret

000000c4 <_ZN10QTRASensorC1EPhhh>:
#include <avr/io.h>

#include "QTRA_Sensor.h"


QTRASensor::QTRASensor(unsigned char* sensorPins, unsigned char numSensors, unsigned char numSamplesPerSensor)
  c4:	0f 93       	push	r16
  c6:	1f 93       	push	r17
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	dc 01       	movw	r26, r24
{
	unsigned char currentPin = 0;
	
	calibratedMinimumOn=0;
  ce:	11 96       	adiw	r26, 0x01	; 1
  d0:	1c 92       	st	X, r1
  d2:	1e 92       	st	-X, r1
	calibratedMaximumOn=0;
  d4:	13 96       	adiw	r26, 0x03	; 3
  d6:	1c 92       	st	X, r1
  d8:	1e 92       	st	-X, r1
  da:	12 97       	sbiw	r26, 0x02	; 2
	calibratedMinimumOff=0;
  dc:	15 96       	adiw	r26, 0x05	; 5
  de:	1c 92       	st	X, r1
  e0:	1e 92       	st	-X, r1
  e2:	14 97       	sbiw	r26, 0x04	; 4
	calibratedMaximumOff=0;
  e4:	17 96       	adiw	r26, 0x07	; 7
  e6:	1c 92       	st	X, r1
  e8:	1e 92       	st	-X, r1
  ea:	16 97       	sbiw	r26, 0x06	; 6
	
	if (numSensors > QTRA_MAX_SENSORS)
  ec:	49 30       	cpi	r20, 0x09	; 9
  ee:	28 f0       	brcs	.+10     	; 0xfa <_ZN10QTRASensorC1EPhhh+0x36>
	{
		this->numSensors = QTRA_MAX_SENSORS;
  f0:	88 e0       	ldi	r24, 0x08	; 8
  f2:	18 96       	adiw	r26, 0x08	; 8
  f4:	8c 93       	st	X, r24
  f6:	18 97       	sbiw	r26, 0x08	; 8
  f8:	03 c0       	rjmp	.+6      	; 0x100 <_ZN10QTRASensorC1EPhhh+0x3c>
	}
	else
	{
		this->numSensors = numSensors;
  fa:	18 96       	adiw	r26, 0x08	; 8
  fc:	4c 93       	st	X, r20
  fe:	18 97       	sbiw	r26, 0x08	; 8
	}
	
	this->numSamplesPerSensor = numSamplesPerSensor;
 100:	19 96       	adiw	r26, 0x09	; 9
 102:	2c 93       	st	X, r18
 104:	19 97       	sbiw	r26, 0x09	; 9
	
	portMask = 0;
 106:	52 96       	adiw	r26, 0x12	; 18
 108:	1c 92       	st	X, r1
 10a:	52 97       	sbiw	r26, 0x12	; 18
	for(currentPin = 0; currentPin < numSensors; currentPin++)
 10c:	44 23       	and	r20, r20
 10e:	19 f1       	breq	.+70     	; 0x156 <_ZN10QTRASensorC1EPhhh+0x92>
 110:	8d 01       	movw	r16, r26
 112:	06 5f       	subi	r16, 0xF6	; 246
 114:	1f 4f       	sbci	r17, 0xFF	; 255
 116:	fb 01       	movw	r30, r22
 118:	41 50       	subi	r20, 0x01	; 1
 11a:	50 e0       	ldi	r21, 0x00	; 0
 11c:	4f 5f       	subi	r20, 0xFF	; 255
 11e:	5f 4f       	sbci	r21, 0xFF	; 255
 120:	64 0f       	add	r22, r20
 122:	75 1f       	adc	r23, r21
	{
		this->sensorPins[currentPin] = sensorPins[currentPin];
		portMask |= (1 << sensorPins[currentPin]);
 124:	41 e0       	ldi	r20, 0x01	; 1
 126:	50 e0       	ldi	r21, 0x00	; 0
 128:	cf 01       	movw	r24, r30
	this->numSamplesPerSensor = numSamplesPerSensor;
	
	portMask = 0;
	for(currentPin = 0; currentPin < numSensors; currentPin++)
	{
		this->sensorPins[currentPin] = sensorPins[currentPin];
 12a:	21 91       	ld	r18, Z+
 12c:	e8 01       	movw	r28, r16
 12e:	29 93       	st	Y+, r18
 130:	8e 01       	movw	r16, r28
		portMask |= (1 << sensorPins[currentPin]);
 132:	9a 01       	movw	r18, r20
 134:	ec 01       	movw	r28, r24
 136:	08 80       	ld	r0, Y
 138:	02 c0       	rjmp	.+4      	; 0x13e <_ZN10QTRASensorC1EPhhh+0x7a>
 13a:	22 0f       	add	r18, r18
 13c:	33 1f       	adc	r19, r19
 13e:	0a 94       	dec	r0
 140:	e2 f7       	brpl	.-8      	; 0x13a <_ZN10QTRASensorC1EPhhh+0x76>
 142:	52 96       	adiw	r26, 0x12	; 18
 144:	8c 91       	ld	r24, X
 146:	52 97       	sbiw	r26, 0x12	; 18
 148:	28 2b       	or	r18, r24
 14a:	52 96       	adiw	r26, 0x12	; 18
 14c:	2c 93       	st	X, r18
 14e:	52 97       	sbiw	r26, 0x12	; 18
	}
	
	this->numSamplesPerSensor = numSamplesPerSensor;
	
	portMask = 0;
	for(currentPin = 0; currentPin < numSensors; currentPin++)
 150:	e6 17       	cp	r30, r22
 152:	f7 07       	cpc	r31, r23
 154:	49 f7       	brne	.-46     	; 0x128 <_ZN10QTRASensorC1EPhhh+0x64>
		this->sensorPins[currentPin] = sensorPins[currentPin];
		portMask |= (1 << sensorPins[currentPin]);
	}
	
	// Configure ADC settings. Prescalar set to 156kHz
	ADCSRA |= (1 << ADEN)| (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 156:	ea e7       	ldi	r30, 0x7A	; 122
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	87 68       	ori	r24, 0x87	; 135
 15e:	80 83       	st	Z, r24
	
	// Turn off the emitter
	EmittersOff();
 160:	cd 01       	movw	r24, r26
 162:	0e 94 60 00 	call	0xc0	; 0xc0 <_ZN10QTRASensor11EmittersOffEv>
}
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	1f 91       	pop	r17
 16c:	0f 91       	pop	r16
 16e:	08 95       	ret

00000170 <_exit>:
 170:	f8 94       	cli

00000172 <__stop_program>:
 172:	ff cf       	rjmp	.-2      	; 0x172 <__stop_program>
